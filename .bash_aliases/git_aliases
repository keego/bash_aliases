# Utility for executing multiple commands and backing out on failure
execute-commands () {
  if [[ $# -lt 1 ]]; then
    echo "${FUNCNAME} takes an array of command strings and executes them in order"
    echo "bailing as soon as the first one exits with a non-zero exit code."
    echo
    local usage_texts=(
      'Example usage:'
      '  example-fn () {'
      '    local commands=('
      '      "echo cmd 1"'
      '      "echo cmd 2"'
      '      "echo cmd 3"'
      '    )'
      "    ${FUNCNAME} \"\${commands[@]}\""
      '  }'
    )
    for text in "${usage_texts[@]}"; do
      echo "$text" >&2
    done
    
    return 2
  fi

  for command in "$@"; do
    echo "eval \"$command\"..."
    eval "$command"
    local exit_code="$?"
    if [[ $exit_code -ne 0 ]]; then
      echo "\"$command\" failed"
      return $exit_code
    fi
    echo
  done
}

# # #
# Git
# # #

in-git-repo () ( git status &> /dev/null; [ $? -eq 0 ]; )
not-in-git-repo () ( git status &> /dev/null; [ $? -ne 0 ]; )
get-git-scope () { if in-git-repo; then echo '--local' ; else echo '--global' ; fi  }

git-get-default-remote-branch () {
  if [[ $# -gt 1 ]]; then
    echo "${FUNCNAME} gets the default branch name of a given git origin"
    echo
    echo "Usage: ${FUNCNAME} [remote='origin']" >&2
    return 2
  fi
  local REMOTE=${1:-'origin'}
  # formerly git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
  # but that's slightly more error prone than below solution
  git remote show $REMOTE | grep 'HEAD branch' | cut -d' ' -f5
}

# git set user
gsu () {
  if [[ $# -ne 3 ]]; then
    echo "Usage: gsu id_privatekey_name \"Full Name\" my.email@gmail.com" >&2
    echo
    echo "Found these possible private keys in ~/.ssh:"
    ls ~/.ssh | grepv 'pub|known_hosts'
    return 2
  fi
  local KEY_FILE=~/.ssh/$1
  local NAME=$2
  local EMAIL=$3
  local SCOPE=$(get-git-scope)
  # echo-run git config $SCOPE core.sshCommand "ssh -i $KEY_FILE"
  echo-run ssh-add -D &&
  echo-run ssh-add $KEY_FILE &&
  echo-run git config $SCOPE user.name "$NAME" &&
  echo-run git config $SCOPE user.email "$EMAIL" &&
  (echo && echo 'success!') ||
  (echo && echo 'failed!')
}

# check which ssh key is used for git clone, cloned repo is thrown away
gclone-check-key () {
  local FOLDER="/tmp/clone-check"
  if [[ -e $FOLDER ]]; then
    echo-run rm -rf $FOLDER
  fi
  (
    GIT_SSH_COMMAND="ssh -v" git clone "$1" $FOLDER 2>&1 | grepc Offering
  )
}

# check which ssh key is used for git fetch
gfetch-check-key () {
  (
    GIT_SSH_COMMAND="ssh -v" git fetch 2>&1 | grepc Offering
  )
}

gconfig () {
  if [[ $# -ne 0 ]]; then
    git config --list --show-origin | grepc $@
  else
    git config --list --show-origin
  fi
}

gwhoami () {
  git config --list --show-origin | grep 'user.'
}

gisancestor () {
  if [[ $# -ne 2 ]]; then
    echo "Usage: $FUNCNAME <maybe-ancestor-treeish> <tip-treeish>" >&2
    echo
    return 2
  fi
  local ANCESTOR=$1
  local TIP=$2
  git merge-base --is-ancestor $ANCESTOR $TIP
  local EXIT_CODE=$?

  if [ $EXIT_CODE -eq 0 ]; then
    echo $TIP descends from $ANCESTOR
  else
    echo $TIP does not descend from $ANCESTOR
  fi

  return $EXIT_CODE
}

alias ga='git add'
alias gaa='git add -A && git status'

alias gb='git branch'
alias gbuoh='git branch -u origin/$(grph)'
gbdoh () {
  BRANCH="$(grph)"
  git checkout HEAD --detach --quiet
  echo
  echo "deleting remote $BRANCH ..."
  git push origin --delete "$BRANCH"
  echo
  echo "deleting local $BRANCH ..."
  git branch -d $BRANCH
}

alias gc='git commit'
alias gcane='git commit --amend --no-edit'
alias gcanenv='gcane --no-verify'
alias gch='git checkout'
gcht() { git fetch "$1" "$2" && git checkout -t "$1/$2" ; }
alias gcm='git commit -m'
alias gcmwip='git add -A && git commit -m "WIP" --no-verify'

alias gd='git diff'
alias gdns='git diff  --name-status'
alias gdnscc="gdns | cut -f 2 | xargs code"
alias gdhns='git diff HEAD~ HEAD --name-status'
alias gdi='git diff --ignore-space-at-eol'
alias gdwc='echo " " +$(git diff | grep -e "^[+][^+]" | wc -l) -$(git diff | grep -e "^[-][^-]" | wc -l)'
alias gdswc='echo " " +$(git diff --staged | grep -e "^[+][^+]" | wc -l) -$(git diff --staged | grep -e "^[-][^-]" | wc -l)'

alias gf='git fetch --all --prune'
gfom () {
  local default_remote_branch=`git-get-default-remote-branch`
  local command="git fetch origin $default_remote_branch:$default_remote_branch"
  echo $command
  eval $command
}

alias gl='git log --decorate --abbrev-commit'
alias glg='git log --decorate --abbrev-commit --graph'
alias glgp='git log --decorate --abbrev-commit --graph --pretty=oneline'
alias glp='git log --decorate --abbrev-commit --pretty=oneline'
alias glt='git log --pretty="%C(auto)[ Authored %ad -- Committed %cd ] %h %d %s" --date=local'

alias gpullohr='glp -5 && git pull origin $(grph) --rebase'
alias gpullom='git pull origin `git-get-default-remote-branch`'
gpullomd () {
  local default_remote_branch=`git-get-default-remote-branch`
  local commands=(
    "gch HEAD --detach"
    "git fetch origin $default_remote_branch:$default_remote_branch"
    "gch $default_remote_branch"
  )
  execute-commands "${commands[@]}"
}
alias gpushoh='git push origin $(grph)'
alias grph='git rev-parse --abbrev-ref HEAD'
alias grphc='echo $(git rev-parse --abbrev-ref HEAD) | pbcopy'

alias gs='git status'
alias gsa='git stash apply'
alias gsl='git stash list'
alias gss='git stash save'
alias gsedit='git status | grep "\t" | cut -d":" -f 2- | xargs code'

gtd() { git tag -d "$*" && git push --delete origin "$*" ; }

git-amend-current-commit-date() { GIT_COMMITTER_DATE="$1" git commit --amend --date="$1" --no-edit ; }
git-view-changes() { FROM="$1" ; TO="$2" ; git checkout $TO && git reset $FROM --soft ; }
code-review() {
  if [[ $# -ne 1 ]]; then
    echo "Usage: $FUNCNAME <branch>" >&2
    return 2
  fi
  local branch="$1"
  local cr_branch="code-review/$1"
  local default_remote_branch=`git-get-default-remote-branch`
  local commands=(
    "git checkout --detach"
    "git fetch origin $default_remote_branch"
    "git branch -f $cr_branch $branch"
    "git checkout $cr_branch"
    "git reset origin/$default_remote_branch --soft"
  )
  execute-commands "${commands[@]}"
}
